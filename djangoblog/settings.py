"""
Django settings for djangoblog project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import os
import sys
from platform import _wmi_query

from django.utils.translation import gettext_lazy as _


def env_to_bool(env, default):
    str_val = os.environ.get(env)
    return default if str_val is None else str_val == 'True'


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY') or 'n9ceqv38)#&mwuat@(mjb_p%em$e8$qyr#fw9ot!=ba6lijx-6'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_to_bool('DJANGO_DEBUG', True)
# DEBUG = False
TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']
# django 4.0新增配置
CSRF_TRUSTED_ORIGINS = ['http://example.com']
# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'accounts',
    'blog',
    'comments',
    'oauth',
    'owntracks',
    'servermanager',
    'haystack',
    'pure_pagination',
    'compressor',
    'ckeditor',
    'ckeditor_uploader',
    'rest_framework',
    'imagekit',
    'jsonfield',
    'django_json_widget',
    'markdown',
    'auditlog',
    'django_apscheduler',
    'channels',
    'channels_redis',
    'grappelli',
    'filebrowser',
    'storages',
    'tinymce',
    'captcha',
    'crispy_forms',
]

MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'djangoblog.middleware.rate_limit_middleware.RateLimitMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'blog.middleware.OnlineMiddleware'
]

ROOT_URLCONF = 'djangoblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'blog.context_processors.seo_processor'
            ],
            'libraries': {
                # 'blog_tags': 'blog.templatetags.blog_tags', # 移除显式加载
            },
            'debug': True,
        },
    },
]

WSGI_APPLICATION = 'djangoblog.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'djangoblog',
        'USER': 'root',
        'PASSWORD': '12345678',
        'HOST': "localhost",
        'PORT': 3306,
        

    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGES = (
    ('en', _('English')),
    ('zh-hans', _('Simplified Chinese')),
    ('zh-hant', _('Traditional Chinese')),
)
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/


HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'djangoblog.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    },
}
# Automatically update searching index
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
AUTHENTICATION_BACKENDS = [
    'accounts.user_login_backend.EmailOrUsernameModelBackend']

STATIC_ROOT = os.path.join(BASE_DIR, 'collectedstatic')

STATIC_URL = '/static/'
STATICFILES = os.path.join(BASE_DIR, 'static')

# MEDIA_URL = '/media/' # Old local media URL
# MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads') # Old local media root

# Point MEDIA_URL directly to Wasabi for direct access
MEDIA_URL = 'https://s3.ap-southeast-1.wasabisys.com/huani-wasabi-bucket-2024/media/' # Your Wasabi bucket base URL + a media path if desired

AUTH_USER_MODEL = 'accounts.BlogUser'
LOGIN_URL = '/login/'

TIME_FORMAT = '%Y-%m-%d %H:%M:%S'
DATE_TIME_FORMAT = '%Y-%m-%d'

# bootstrap color styles
BOOTSTRAP_COLOR_TYPES = [
    'default', 'primary', 'success', 'info', 'warning', 'danger'
]

# paginate
PAGINATE_BY = 10




CACHE_CONTROL_MAX_AGE = 2592000
# cache setting
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'TIMEOUT': 10800,
        'LOCATION': 'unique-snowflake',
    }
}
# 使用redis作为缓存
if os.environ.get("DJANGO_REDIS_URL"):
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': f'redis://{os.environ.get("DJANGO_REDIS_URL")}',
        }
    }

SITE_ID = 1
BAIDU_NOTIFY_URL = os.environ.get('DJANGO_BAIDU_NOTIFY_URL') \
                   or 'http://data.zz.baidu.com/urls?site=https://www.lylinux.net&token=1uAOGrMsUm5syDGn'

# Email:
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = env_to_bool('DJANGO_EMAIL_TLS', False)
EMAIL_USE_SSL = env_to_bool('DJANGO_EMAIL_SSL', True)
EMAIL_HOST = os.environ.get('DJANGO_EMAIL_HOST') or 'smtp.mxhichina.com'
EMAIL_PORT = int(os.environ.get('DJANGO_EMAIL_PORT') or 465)
EMAIL_HOST_USER = os.environ.get('DJANGO_EMAIL_USER')
EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
# Setting debug=false did NOT handle except email notifications
ADMINS = [('admin', os.environ.get('DJANGO_ADMIN_EMAIL') or 'admin@admin.com')]
# WX ADMIN password(Two times md5)
WXADMIN = os.environ.get(
    'DJANGO_WXADMIN_PASSWORD') or '995F03AC401D6CABABAEF756FC4D43C7'

LOG_PATH = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_PATH):
    os.makedirs(LOG_PATH, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple' if DEBUG else 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'accounts': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'blog': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    }
}

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # other
    'compressor.finders.CompressorFinder',
)
COMPRESS_ENABLED = True
# COMPRESS_OFFLINE = True


COMPRESS_CSS_FILTERS = [
    # creates absolute urls from relative ones
    'compressor.filters.css_default.CssAbsoluteFilter',
    # css minimizer
    'compressor.filters.cssmin.CSSMinFilter'
]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter'
]

CKEDITOR_BASEPATH = '/static/ckeditor/ckeditor/' # This should point to your CKEditor installation directory
CKEDITOR_UPLOAD_PATH = 'uploads/' # This is where files uploaded via CKEditor default uploader will go (still needs to be S3 compatible)
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': '100%',
        'extraPlugins': 'codesnippet,image2,wasabifilebrowser', # Removed uploadimage and exportpdf, Add wasabifilebrowser plugin
        'removePlugins': 'filebrowser,image,exportpdf,uploadimage', # Ensure all conflicting/unwanted plugins are removed
        'filebrowserBrowseUrl': '/wasabi-file-browser/?CKEditor=id_body', # Set the custom file browser URL
        'filebrowserUploadUrl': '/ckeditor/upload/', # Default upload URL
        'allowedContent': True, # Temporarily disable ACF for testing
        'pasteFromWordRemoveFontStyles': False,
        'pasteFromWordRemoveStyles': False,
        'pasteFromWordNumberedListConversion': 'lower-roman',
        'pasteFromWordPromptCleanup': True,
        'forcePasteAsPlainText': False,
        'clipboard_handleImages': True, # Enable clipboard image handling
        'toolbar_Custom': [
            ['Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates'],
            ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo'],
            ['Find', 'Replace', '-', 'SelectAll', '-', 'Scayt'],
            ['Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button', 'ImageButton', 'HiddenField'],
            ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', 'CreateDiv', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl', 'Language'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image2', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak', 'Iframe'],
            ['WasabiFileBrowser'], # Add the new button here
            '/',
            ['Styles', 'Format', 'Font', 'FontSize'],
            ['TextColor', 'BGColor'],
            ['Maximize', 'ShowBlocks', '-', 'About'],
            ['CodeSnippet']
        ],
        'toolbar': 'Custom',
    },
}

X_FRAME_OPTIONS = 'SAMEORIGIN'


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if os.environ.get('DJANGO_ELASTICSEARCH_HOST'):
    ELASTICSEARCH_DSL = {
        'default': {
            'hosts': os.environ.get('DJANGO_ELASTICSEARCH_HOST')
        },
    }
    HAYSTACK_CONNECTIONS = {
        'default': {
            'ENGINE': 'djangoblog.elasticsearch_backend.ElasticSearchEngine',
        },
    }

# CKEditor 配置
CKEDITOR_JQUERY_URL = 'https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js' # 如果你的Django Admin没有加载jQuery，可以加上这个

# FileBrowser settings
FILEBROWSER_DIRECTORY = '' # Set to the subdirectory where your files are uploaded

# Optional: FileBrowser versions (for image resizing)
# FILEBROWSER_VERSIONS = {
#     'admin_thumbnail': {'verbose_name': 'Admin Thumbnail', 'width': 60, 'height': 60, 'opts': 'crop'},
#     'thumbnail': {'verbose_name': 'Thumbnail', 'width': 140, 'height': '', 'opts': 'upscale'},
#     'small': {'verbose_name': 'Small', 'width': 300, 'height': '', 'opts': 'upscale'},
#     'medium': {'verbose_name': 'Medium', 'width': 600, 'height': '', 'opts': 'upscale'},
#     'big': {'verbose_name': 'Big', 'width': 760, 'height': '', 'opts': 'upscale'},
#     'large': {'verbose_name': 'Large', 'width': 1000, 'height': '', 'opts': 'upscale'},
# }

# Optional: FileBrowser default version for insertion
# FILEBROWSER_DEFAULT_VERSION = 'medium'

# Optional: FileBrowser allowed file extensions
# FILEBROWSER_EXTENSIONS = {
#     'Image': ['.jpg', '.jpeg', '.png', '.gif', '.tif', '.tiff'],
#     'Video': ['.mov', '.wmv', '.mpeg', '.mp4', '.avi', '.flv'],
#     'Document': ['.pdf', '.doc', '.rtf', '.txt', '.xls', '.csv', '.pps', '.ppt', '.docx', '.xlsx', '.pptx'],
#     'Archive': ['.zip', '.gz', '.tar', '.bz2'],
#     'Audio': ['.wav', '.mp3', '.mp4a', '.oga', '.ogg', '.playback'],
# }

# Optional: FileBrowser icon versions
# FILEBROWSER_ADMIN_VERSIONS = ['thumbnail']
# FILEBROWSER_ADMIN_THUMBNAIL = 'admin_thumbnail'

# 默认文件存储后端
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Wasabi S3 相关配置
AWS_ACCESS_KEY_ID = 'BKGHJM0UOOQXH7MQW42T'
AWS_SECRET_ACCESS_KEY = 'YQZeLGeHELdTXJeuRbNdGOaimdoIVAqqmK9Tsrzk'
AWS_STORAGE_BUCKET_NAME = 'huani-wasabi-bucket-2024'
AWS_S3_ENDPOINT_URL = 'https://s3.ap-southeast-1.wasabisys.com'  # 例如 https://s3.us-west-1.wasabisys.com
AWS_LOCATION = 'media/uploads/'

# 可选配置
AWS_S3_REGION_NAME = 'ap-southeast-1'  # 例如 us-west-1
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_DEFAULT_ACL = None  # 推荐设置为None，避免权限问题
AWS_S3_FILE_OVERWRITE = False  # 避免文件名冲突时被覆盖
AWS_QUERYSTRING_AUTH = True   # 让文件URL不带签名，适合公开访问
AWS_QUERYSTRING_EXPIRE = 86400  # 预签名URL过期时间（秒），这里设置为7天

CAPTCHA_IMAGE_SIZE = (120, 40)
CAPTCHA_FONT_SIZE = 24

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Rate Limiting settings
RATE_LIMIT_REQUESTS = 500  # Number of requests allowed in the time window
RATE_LIMIT_TIME_WINDOW = 300 # Time window in seconds (e.g., 300 seconds = 5 minutes)

